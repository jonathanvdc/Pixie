namespace Pixie
{
    /// <summary>
    /// Defines constants for markup nodes.
    /// </summary>
    public static class NodeConstants
    {
        /// <summary>
        /// A markup node type for text nodes.
        /// </summary>
        public const string TextNodeType = "#text";

        /// <summary>
        /// An attribute key for text node contents.
        /// </summary>
        public const string TextAttribute = "#text";

        /// <summary>
        /// An attribute key for color attributes.
        /// </summary>
        public const string ColorAttribute = "color";

        /// <summary>
        /// A markup node type for nodes that contain an error report.
        /// </summary>
        public const string ErrorNodeType = "error";

        /// <summary>
        /// A markup node type for nodes that contain an warning report.
        /// </summary>
        public const string WarningNodeType = "warning";

        /// <summary>
        /// A markup node type for message nodes.
        /// </summary>
        public const string MessageNodeType = "message";

        /// <summary>
        /// A markup node type for nodes that report events.
        /// </summary>
        public const string EventNodeType = "event";

        /// <summary>
        /// A markup node type for nodes that report a success.
        /// </summary>
        public const string SuccessNodeType = "success";

        /// <summary>
        /// A markup node type for nodes that should be highlighted.
        /// </summary>
        public const string HighlightNodeType = "highlight";

        /// <summary>
        /// An attribute key that specifies a highlighting type.
        /// </summary>
        public const string HighlightingTypeAttribute = "type";

        /// <summary>
        /// The default highlighting type value.
        /// </summary>
        public const string DefaultHighlightingType = "default";

        /// <summary>
        /// A highlighting type that indicates missing components.
        /// </summary>
        public const string MissingHighlightingType = "missing";

        /// <summary>
        /// A highlighting type that indicates additional components.
        /// </summary>
        public const string ExtraHighlightingType = "extra";

        /// <summary>
        /// A markup node type that identifies a source code block node.
        /// </summary>
        public const string SourceNodeType = "source";

        /// <summary>
        /// A markup node type that identifies an inline source code quote node.
        /// </summary>
        public const string SourceQuoteNodeType = "source-quote";

        /// <summary>
        /// A markup node type that identifies a node that represents diagnostics
        /// data.
        /// </summary>
        public const string DiagnosticsNodeType = "diagnostics";

        /// <summary>
        /// A markup node type for source location nodes. These nodes
        /// capture the source file, offset and length of a source code
        /// fragment.
        /// </summary>
        public const string SourceLocationNodeType = "source-location";

        /// <summary>
        /// A markup node attribute for source locations.
        /// </summary>
        public const string SourceLocationAttribute = "source-location";

        /// <summary>
        /// A markup node type for title nodes.
        /// </summary>
        public const string TitleNodeType = "title";

        /// <summary>
        /// A markup node type for nodes that represent a summary.
        /// </summary>
        public const string SummaryNodeType = "summary";

        /// <summary>
        /// A markup node type for nodes that represent additional remarks.
        /// </summary>
        public const string RemarksNodeType = "remarks";

        /// <summary>
        /// A markup node type for lists.
        /// </summary>
        public const string ListNodeType = "list";

        /// <summary>
        /// An attribute key for list bullet strings.
        /// </summary>
        public const string ListBulletAttribute = "bullet";

        /// <summary>
        /// A markup node type for list items.
        /// </summary>
        public const string ListItemNodeType = "list-item";

        /// <summary>
        /// A markup node type for paragraphs.
        /// </summary>
        public const string ParagraphNodeType = "para";

        /// <summary>
        /// A markup node type for nodes whose contents should be printed
        /// in a bright color.
        /// </summary>
        public const string BrightNodeType = "bright";

        /// <summary>
        /// A markup node type for nodes whose contents should be printed
        /// in a dim color.
        /// </summary>
        public const string DimNodeType = "dim";

        /// <summary>
        /// A markup node type that contains the superficial cause of why
        /// something is happening. For example, if a compiler issues a warning,
        /// then the "cause" of said warning being issued is the warning's
        /// associated option having been set to 'true'.
        /// Cause nodes should be as succinct as possible.
        /// </summary>
        /// <remarks>
        /// A console markup renderer could markup nodes such as
        ///    <code>&lt;cause&gt;Winfinite-recursion&lt;/cause&gt;</code>,
        /// like so
        ///    <code>[-Winfinite-recursion]</code>
        /// </remarks>
        public const string CauseNodeType = "cause";
    }
}
